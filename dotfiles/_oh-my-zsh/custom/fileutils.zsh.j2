# calculate a collective hash for all the small files (<20M) in a directory
function smallfilehash() {
    find "$1" -type f -size -20M -not -iname '.*' -exec md5sum \{\} \; |
    awk '{print $1}' | sort -n | md5sum | awk '{print $1}'
}

# convenience wrapper for finding files by extension
extfind() {
    local namecase="i"
    local nameexp=""
    local dir="."

    if [ -d "$1" ]; then
        dir="$1"
        shift
    fi

    # construct an array of -name/-iname arguments
    nameexp=("-${namecase}name *.""$^@")

    # join the array with "-o" and split on spaces
    find "$dir" ${(j: -o :s: :)nameexp}

{#
Reference:
    http://unix.stackexchange.com/a/258928
    http://stackoverflow.com/a/10796467
    man zshexpn
#}
}

# apply an on files with extension ext1, depending if their pair with extension ext2 exists
# the condition can be inversed with flag -v
extpair() {
    local prefix ext1 ext2 inv
    zparseopts -D -E -A opts v=inv

    if (( $# < 4 )); then
        cat >&2 <<-EOF
		Nothing to backup. Usage:
		    $0 [-v] <prefix> <ext1> <ext2> <action...>
		EOF
        return 1
    fi

    prefix="$1"
    ext1="$2"
    ext2="$3"
    shift 3

    for f1 in "${prefix}"*.${ext1}; do
        f2=${f1%%.${ext1}}.${ext2}

        if [ -e "${f2}" -a "$inv" = "" ]; then
            $@ ${f1}
        elif [ ! -e "${f2}" -a "$inv" != "" ]; then
            $@ ${f1}
        fi
    done
}


# create backup of directory
mkbak() {
{% if "gtar" is installed %}
    local TAR=gtar
{% else %}
    local TAR=tar
{% endif %}
{% if "gsed" is installed %}
    local SED=gsed
{% else %}
    local SED=sed
{% endif %}
    local -A opts=(-keep 0)
    local prefix suffix
    local Y m d j H M
    local tsfile

    zparseopts -D -E -K -A opts -T -keep: p:

    if (( $# < 1 )); then
        cat >&2 <<-EOF
		Nothing to backup. Usage:
		    $0 [-p BAKPREFIX] [-T] [--keep NKEEP] FILE1 [FILE2 ...]

			Mandatory arguments:
			  TIMESPEC    Time specification, suitable for fftimeparse.
			  INPUT       File to process.
			  OUTPUT      File to write the gif output.
			
			Optional arguments:
			  -p BAKPREFIX          Use the specified prefix for the backup file.
			                        The default is to create one from the file list to
			                        be backed up, after applying some normalizations.
			  -T                    Use the most recent file timestamp as the suffix of
			                        the backup file. The default is to use the current
			                        date/time.
			  --keep NKEEP          Keep the NKEEP most recent backup files with the
			                        current prefix. The default is 0 (i.e. keep all).
		EOF
        return 1
    fi

    # read timestamp components and make unique suffix
    if [ ! -z $opts[(Ie)-T] ]; then
        # use newest file timestamp
        find $@ -type f -printf '%TY %Tm %Td %Tj %TH %TM %p\n' | sort -rn | head -n 1 | read Y m d j H M tsfile
    else
        # use current date timestamp
        date '+%Y %m %d %j %H %M' | read Y m d j H M
    fi
    suffix=$(printf "%d%02d%02d_%04d" "$Y" "$m" "$d" "$(( $H*60 + $M ))")

    if [ ! -z $opts[(Ie)-p] ]; then
        # use specified prefix
        prefix=$opts[-p]
    else
        # make prefix from arguments
        prefix=$(echo "$@" | $SED -E 's%\./?%%g' | tr A-Z/\  a-z_-)
    fi

    # create archive
    $TAR -zcvf "${prefix}_${suffix}.tar.gz" "$@"

    if [ $? = 0 ]; then
        printf "Created backup file %q.\n" \
            "${prefix}_${suffix}.tar.gz" >&2

        if (( opts[--keep] > 0 )); then
            printf "Cleanup. Keeping last %d backups matching %s.\n" \
                $opts[--keep] "${prefix}_*.tar.gz" >&2
            find . -maxdepth 1 -type f -iname "${prefix}_*.tar.gz" |
                sort -n | head -n $((-opts[--keep])) | xargs -r rm -v
        fi
    else
        return 2
    fi
}

# remove BOM marker from UTF-8 files
utf8-debom() {
{% if "gsed" is installed %}
    local SED=gsed
{% else %}
    local SED=sed
{% endif %}
    $SED -i '1s/^\xEF\xBB\xBF//' $@
}

# vim: ft=zsh expandtab ts=4 sts=4 sw=4 :
